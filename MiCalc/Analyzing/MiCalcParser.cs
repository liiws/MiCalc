// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  LGT-PC
// DateTime: 22.09.2013 2:32:12
// UserName: lgt
// Input file <MiCalcParser.y - 22.09.2013 2:32:07>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MiCalc.Runtime;

namespace MiCalc.Analyzing
{
public enum Tokens {
    error=1,EOF=2,NUMBER=3,CONST_PI=4,CONST_E=5,FUNC_FLOOR=6,
    FUNC_CEIL=7,FUNC_ROUND=8,FUNC_SIN=9,FUNC_COS=10,FUNC_TAN=11,FUNC_ASIN=12,
    FUNC_ACOS=13,FUNC_ATAN=14,FUNC_SINH=15,FUNC_COSH=16,FUNC_TANG=17,FUNC_ASINH=18,
    FUNC_ACOSH=19,FUNC_ATANH=20,FUNC_LN=21,FUNC_LG=22,FUNC_EXP=23,FUNC_SQRT=24,
    OP_RIGHT_PAR=25,OP_LEFT_PAR=26,OP_RSH=27,OP_LSH=28,OP_ADD=29,OP_SUB=30,
    OP_MUL=31,OP_DIV=32,OP_MOD=33,OP_OR=34,OP_XOR=35,OP_AND=36,
    OP_NOT=37,OP_POW=38,OP_FAC=39,UMINUS=40,UPLUS=41};

public struct ValueType
{
	public string String;
	public Expression expr;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MiCalcParser.y - 22.09.2013 2:32:07
	public Expression expression = new Expression();
  // End verbatim content from MiCalcParser.y - 22.09.2013 2:32:07

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[44];
  private static State[] states = new State[118];
  private static string[] nonTerms = new string[] {
      "expression", "$accept", "expr", "func", "stat", "const", };

  static Parser() {
    states[0] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-1,1,-3,3,-4,30,-5,107,-6,109});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26,2,-2});
    states[4] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,5,-4,30,-5,107,-6,109});
    states[5] = new State(new int[]{29,-6,30,-6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,-6,28,-6,39,26,2,-6,25,-6});
    states[6] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,7,-4,30,-5,107,-6,109});
    states[7] = new State(new int[]{29,-7,30,-7,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,-7,28,-7,39,26,2,-7,25,-7});
    states[8] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,9,-4,30,-5,107,-6,109});
    states[9] = new State(new int[]{29,-8,30,-8,31,-8,32,-8,33,12,38,14,36,16,34,18,35,20,27,-8,28,-8,39,26,2,-8,25,-8});
    states[10] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,11,-4,30,-5,107,-6,109});
    states[11] = new State(new int[]{29,-9,30,-9,31,-9,32,-9,33,12,38,14,36,16,34,18,35,20,27,-9,28,-9,39,26,2,-9,25,-9});
    states[12] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,13,-4,30,-5,107,-6,109});
    states[13] = new State(new int[]{29,-10,30,-10,31,-10,32,-10,33,-10,38,14,36,16,34,18,35,20,27,-10,28,-10,39,26,2,-10,25,-10});
    states[14] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,15,-4,30,-5,107,-6,109});
    states[15] = new State(new int[]{29,-11,30,-11,31,-11,32,-11,33,-11,38,-11,36,-11,34,-11,35,-11,27,-11,28,-11,39,26,2,-11,25,-11});
    states[16] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,17,-4,30,-5,107,-6,109});
    states[17] = new State(new int[]{29,-12,30,-12,31,-12,32,-12,33,-12,38,14,36,-12,34,-12,35,-12,27,-12,28,-12,39,26,2,-12,25,-12});
    states[18] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,19,-4,30,-5,107,-6,109});
    states[19] = new State(new int[]{29,-13,30,-13,31,-13,32,-13,33,-13,38,14,36,16,34,-13,35,20,27,-13,28,-13,39,26,2,-13,25,-13});
    states[20] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,21,-4,30,-5,107,-6,109});
    states[21] = new State(new int[]{29,-15,30,-15,31,-15,32,-15,33,-15,38,14,36,16,34,-15,35,-15,27,-15,28,-15,39,26,2,-15,25,-15});
    states[22] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,23,-4,30,-5,107,-6,109});
    states[23] = new State(new int[]{29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,-16,28,-16,39,26,2,-16,25,-16});
    states[24] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,25,-4,30,-5,107,-6,109});
    states[25] = new State(new int[]{29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,-17,28,-17,39,26,2,-17,25,-17});
    states[26] = new State(-18);
    states[27] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,28,-4,30,-5,107,-6,109});
    states[28] = new State(new int[]{25,29,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[29] = new State(-3);
    states[30] = new State(-4);
    states[31] = new State(new int[]{26,32});
    states[32] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,33,-4,30,-5,107,-6,109});
    states[33] = new State(new int[]{25,34,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[34] = new State(-21);
    states[35] = new State(new int[]{26,36});
    states[36] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,37,-4,30,-5,107,-6,109});
    states[37] = new State(new int[]{25,38,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[38] = new State(-22);
    states[39] = new State(new int[]{26,40});
    states[40] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,41,-4,30,-5,107,-6,109});
    states[41] = new State(new int[]{25,42,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[42] = new State(-23);
    states[43] = new State(new int[]{26,44});
    states[44] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,45,-4,30,-5,107,-6,109});
    states[45] = new State(new int[]{25,46,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[46] = new State(-24);
    states[47] = new State(new int[]{26,48});
    states[48] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,49,-4,30,-5,107,-6,109});
    states[49] = new State(new int[]{25,50,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[50] = new State(-25);
    states[51] = new State(new int[]{26,52});
    states[52] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,53,-4,30,-5,107,-6,109});
    states[53] = new State(new int[]{25,54,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[54] = new State(-26);
    states[55] = new State(new int[]{26,56});
    states[56] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,57,-4,30,-5,107,-6,109});
    states[57] = new State(new int[]{25,58,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[58] = new State(-27);
    states[59] = new State(new int[]{26,60});
    states[60] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,61,-4,30,-5,107,-6,109});
    states[61] = new State(new int[]{25,62,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[62] = new State(-28);
    states[63] = new State(new int[]{26,64});
    states[64] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,65,-4,30,-5,107,-6,109});
    states[65] = new State(new int[]{25,66,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[66] = new State(-29);
    states[67] = new State(new int[]{26,68});
    states[68] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,69,-4,30,-5,107,-6,109});
    states[69] = new State(new int[]{25,70,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[70] = new State(-30);
    states[71] = new State(new int[]{26,72});
    states[72] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,73,-4,30,-5,107,-6,109});
    states[73] = new State(new int[]{25,74,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[74] = new State(-31);
    states[75] = new State(new int[]{26,76});
    states[76] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,77,-4,30,-5,107,-6,109});
    states[77] = new State(new int[]{25,78,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[78] = new State(-32);
    states[79] = new State(new int[]{26,80});
    states[80] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,81,-4,30,-5,107,-6,109});
    states[81] = new State(new int[]{25,82,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[82] = new State(-33);
    states[83] = new State(new int[]{26,84});
    states[84] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,85,-4,30,-5,107,-6,109});
    states[85] = new State(new int[]{25,86,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[86] = new State(-34);
    states[87] = new State(new int[]{26,88});
    states[88] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,89,-4,30,-5,107,-6,109});
    states[89] = new State(new int[]{25,90,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[90] = new State(-35);
    states[91] = new State(new int[]{26,92});
    states[92] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,93,-4,30,-5,107,-6,109});
    states[93] = new State(new int[]{25,94,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[94] = new State(-36);
    states[95] = new State(new int[]{26,96});
    states[96] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,97,-4,30,-5,107,-6,109});
    states[97] = new State(new int[]{25,98,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[98] = new State(-37);
    states[99] = new State(new int[]{26,100});
    states[100] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,101,-4,30,-5,107,-6,109});
    states[101] = new State(new int[]{25,102,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[102] = new State(-38);
    states[103] = new State(new int[]{26,104});
    states[104] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,105,-4,30,-5,107,-6,109});
    states[105] = new State(new int[]{25,106,29,4,30,6,31,8,32,10,33,12,38,14,36,16,34,18,35,20,27,22,28,24,39,26});
    states[106] = new State(-39);
    states[107] = new State(-5);
    states[108] = new State(-40);
    states[109] = new State(-41);
    states[110] = new State(-42);
    states[111] = new State(-43);
    states[112] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,113,-4,30,-5,107,-6,109});
    states[113] = new State(new int[]{29,-14,30,-14,31,-14,32,-14,33,-14,38,14,36,-14,34,-14,35,-14,27,-14,28,-14,39,26,2,-14,25,-14});
    states[114] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,115,-4,30,-5,107,-6,109});
    states[115] = new State(-19);
    states[116] = new State(new int[]{26,27,6,31,7,35,8,39,9,43,10,47,11,51,12,55,13,59,14,63,15,67,16,71,17,75,18,79,19,83,20,87,21,91,22,95,23,99,24,103,3,108,4,110,5,111,37,112,30,114,29,116},new int[]{-3,117,-4,30,-5,107,-6,109});
    states[117] = new State(-20);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{26,-3,25});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-3,29,-3});
    rules[7] = new Rule(-3, new int[]{-3,30,-3});
    rules[8] = new Rule(-3, new int[]{-3,31,-3});
    rules[9] = new Rule(-3, new int[]{-3,32,-3});
    rules[10] = new Rule(-3, new int[]{-3,33,-3});
    rules[11] = new Rule(-3, new int[]{-3,38,-3});
    rules[12] = new Rule(-3, new int[]{-3,36,-3});
    rules[13] = new Rule(-3, new int[]{-3,34,-3});
    rules[14] = new Rule(-3, new int[]{37,-3});
    rules[15] = new Rule(-3, new int[]{-3,35,-3});
    rules[16] = new Rule(-3, new int[]{-3,27,-3});
    rules[17] = new Rule(-3, new int[]{-3,28,-3});
    rules[18] = new Rule(-3, new int[]{-3,39});
    rules[19] = new Rule(-3, new int[]{30,-3});
    rules[20] = new Rule(-3, new int[]{29,-3});
    rules[21] = new Rule(-4, new int[]{6,26,-3,25});
    rules[22] = new Rule(-4, new int[]{7,26,-3,25});
    rules[23] = new Rule(-4, new int[]{8,26,-3,25});
    rules[24] = new Rule(-4, new int[]{9,26,-3,25});
    rules[25] = new Rule(-4, new int[]{10,26,-3,25});
    rules[26] = new Rule(-4, new int[]{11,26,-3,25});
    rules[27] = new Rule(-4, new int[]{12,26,-3,25});
    rules[28] = new Rule(-4, new int[]{13,26,-3,25});
    rules[29] = new Rule(-4, new int[]{14,26,-3,25});
    rules[30] = new Rule(-4, new int[]{15,26,-3,25});
    rules[31] = new Rule(-4, new int[]{16,26,-3,25});
    rules[32] = new Rule(-4, new int[]{17,26,-3,25});
    rules[33] = new Rule(-4, new int[]{18,26,-3,25});
    rules[34] = new Rule(-4, new int[]{19,26,-3,25});
    rules[35] = new Rule(-4, new int[]{20,26,-3,25});
    rules[36] = new Rule(-4, new int[]{21,26,-3,25});
    rules[37] = new Rule(-4, new int[]{22,26,-3,25});
    rules[38] = new Rule(-4, new int[]{23,26,-3,25});
    rules[39] = new Rule(-4, new int[]{24,26,-3,25});
    rules[40] = new Rule(-5, new int[]{3});
    rules[41] = new Rule(-5, new int[]{-6});
    rules[42] = new Rule(-6, new int[]{4});
    rules[43] = new Rule(-6, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expression -> expr
{ expression = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 3: // expr -> OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 4: // expr -> func
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 5: // expr -> stat
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 6: // expr -> expr, OP_ADD, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Add, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 7: // expr -> expr, OP_SUB, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Sub, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 8: // expr -> expr, OP_MUL, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mul, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 9: // expr -> expr, OP_DIV, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Div, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 10: // expr -> expr, OP_MOD, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mod, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 11: // expr -> expr, OP_POW, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Pow, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 12: // expr -> expr, OP_AND, expr
{ CurrentSemanticValue.expr = new Expression(Operation.And, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 13: // expr -> expr, OP_OR, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Or, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 14: // expr -> OP_NOT, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Not, ValueStack[ValueStack.Depth-1].expr, null); }
        break;
      case 15: // expr -> expr, OP_XOR, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Xor, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 16: // expr -> expr, OP_RSH, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Rsh, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 17: // expr -> expr, OP_LSH, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Lsh, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 18: // expr -> expr, OP_FAC
{ CurrentSemanticValue.expr = new Expression(Operation.Fac, ValueStack[ValueStack.Depth-2].expr, null); }
        break;
      case 19: // expr -> OP_SUB, expr
{ CurrentSemanticValue.expr.IsNegative = !CurrentSemanticValue.expr.IsNegative; }
        break;
      case 20: // expr -> OP_ADD, expr
{ ; }
        break;
      case 21: // func -> FUNC_FLOOR, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Floor, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 22: // func -> FUNC_CEIL, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Ceil, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 23: // func -> FUNC_ROUND, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Round, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 24: // func -> FUNC_SIN, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Sin, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 25: // func -> FUNC_COS, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Cos, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 26: // func -> FUNC_TAN, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Tan, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 27: // func -> FUNC_ASIN, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Asin, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 28: // func -> FUNC_ACOS, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Acos, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 29: // func -> FUNC_ATAN, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Atan, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 30: // func -> FUNC_SINH, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Sinh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 31: // func -> FUNC_COSH, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Cosh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 32: // func -> FUNC_TANG, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Tanh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 33: // func -> FUNC_ASINH, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Asinh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 34: // func -> FUNC_ACOSH, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Acosh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 35: // func -> FUNC_ATANH, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Atanh, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 36: // func -> FUNC_LN, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Ln, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 37: // func -> FUNC_LG, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Lg, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 38: // func -> FUNC_EXP, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Exp, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 39: // func -> FUNC_SQRT, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Sqrt, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 40: // stat -> NUMBER
{ CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String); }
        break;
      case 41: // stat -> const
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 42: // const -> CONST_PI
{ CurrentSemanticValue.expr = new Expression(Constant.Pi); }
        break;
      case 43: // const -> CONST_E
{ CurrentSemanticValue.expr = new Expression(Constant.E); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
