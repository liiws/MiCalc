// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  LGT-PC
// DateTime: 10.09.2013 0:53:30
// UserName: lgt
// Input file <MiCalcParser.y - 10.09.2013 0:53:29>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MiCalc.Runtime;

namespace MiCalc.Analyzing
{
public enum Tokens {
    error=1,EOF=2,NUMBER=3,CONST_PI=4,CONST_E=5,FUNC_FLOOR=6,
    FUNC_CEIL=7,FUNC_ROUND=8,OP_RIGHT_PAR=9,OP_LEFT_PAR=10,OP_ADD=11,OP_SUB=12,
    OP_MUL=13,OP_DIV=14,OP_MOD=15,OP_POW=16,OP_FAC=17,UMINUS=18,
    UPLUS=19};

public struct ValueType
{
	public string String;
	public Expression expr;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from MiCalcParser.y - 10.09.2013 0:53:29
	public Expression expression = new Expression();
  // End verbatim content from MiCalcParser.y - 10.09.2013 0:53:29

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[22];
  private static State[] states = new State[42];
  private static string[] nonTerms = new string[] {
      "expression", "$accept", "expr", "func", "stat", "const", };

  static Parser() {
    states[0] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-1,1,-3,3,-4,20,-5,33,-6,35});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{11,4,12,6,13,8,14,10,15,12,16,14,17,16,2,-2});
    states[4] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,5,-4,20,-5,33,-6,35});
    states[5] = new State(new int[]{11,-6,12,-6,13,8,14,10,15,12,16,14,17,16,2,-6,9,-6});
    states[6] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,7,-4,20,-5,33,-6,35});
    states[7] = new State(new int[]{11,-7,12,-7,13,8,14,10,15,12,16,14,17,16,2,-7,9,-7});
    states[8] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,9,-4,20,-5,33,-6,35});
    states[9] = new State(new int[]{11,-8,12,-8,13,-8,14,-8,15,12,16,14,17,16,2,-8,9,-8});
    states[10] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,11,-4,20,-5,33,-6,35});
    states[11] = new State(new int[]{11,-9,12,-9,13,-9,14,-9,15,12,16,14,17,16,2,-9,9,-9});
    states[12] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,13,-4,20,-5,33,-6,35});
    states[13] = new State(new int[]{11,-10,12,-10,13,-10,14,-10,15,-10,16,14,17,16,2,-10,9,-10});
    states[14] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,15,-4,20,-5,33,-6,35});
    states[15] = new State(new int[]{11,-11,12,-11,13,-11,14,-11,15,-11,16,-11,17,16,2,-11,9,-11});
    states[16] = new State(-12);
    states[17] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,18,-4,20,-5,33,-6,35});
    states[18] = new State(new int[]{9,19,11,4,12,6,13,8,14,10,15,12,16,14,17,16});
    states[19] = new State(-3);
    states[20] = new State(-4);
    states[21] = new State(new int[]{10,22});
    states[22] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,23,-4,20,-5,33,-6,35});
    states[23] = new State(new int[]{9,24,11,4,12,6,13,8,14,10,15,12,16,14,17,16});
    states[24] = new State(-15);
    states[25] = new State(new int[]{10,26});
    states[26] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,27,-4,20,-5,33,-6,35});
    states[27] = new State(new int[]{9,28,11,4,12,6,13,8,14,10,15,12,16,14,17,16});
    states[28] = new State(-16);
    states[29] = new State(new int[]{10,30});
    states[30] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,31,-4,20,-5,33,-6,35});
    states[31] = new State(new int[]{9,32,11,4,12,6,13,8,14,10,15,12,16,14,17,16});
    states[32] = new State(-17);
    states[33] = new State(-5);
    states[34] = new State(-18);
    states[35] = new State(-19);
    states[36] = new State(-20);
    states[37] = new State(-21);
    states[38] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,39,-4,20,-5,33,-6,35});
    states[39] = new State(-13);
    states[40] = new State(new int[]{10,17,6,21,7,25,8,29,3,34,4,36,5,37,12,38,11,40},new int[]{-3,41,-4,20,-5,33,-6,35});
    states[41] = new State(-14);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{10,-3,9});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-3,11,-3});
    rules[7] = new Rule(-3, new int[]{-3,12,-3});
    rules[8] = new Rule(-3, new int[]{-3,13,-3});
    rules[9] = new Rule(-3, new int[]{-3,14,-3});
    rules[10] = new Rule(-3, new int[]{-3,15,-3});
    rules[11] = new Rule(-3, new int[]{-3,16,-3});
    rules[12] = new Rule(-3, new int[]{-3,17});
    rules[13] = new Rule(-3, new int[]{12,-3});
    rules[14] = new Rule(-3, new int[]{11,-3});
    rules[15] = new Rule(-4, new int[]{6,10,-3,9});
    rules[16] = new Rule(-4, new int[]{7,10,-3,9});
    rules[17] = new Rule(-4, new int[]{8,10,-3,9});
    rules[18] = new Rule(-5, new int[]{3});
    rules[19] = new Rule(-5, new int[]{-6});
    rules[20] = new Rule(-6, new int[]{4});
    rules[21] = new Rule(-6, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expression -> expr
{ expression = ValueStack[ValueStack.Depth-1].expr; }
        break;
      case 3: // expr -> OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 4: // expr -> func
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 5: // expr -> stat
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 6: // expr -> expr, OP_ADD, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Add, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 7: // expr -> expr, OP_SUB, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Sub, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 8: // expr -> expr, OP_MUL, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mul, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 9: // expr -> expr, OP_DIV, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Div, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 10: // expr -> expr, OP_MOD, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Mod, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 11: // expr -> expr, OP_POW, expr
{ CurrentSemanticValue.expr = new Expression(Operation.Pow, ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
        break;
      case 12: // expr -> expr, OP_FAC
{ CurrentSemanticValue.expr = new Expression(Operation.Fac, ValueStack[ValueStack.Depth-2].expr, null); }
        break;
      case 13: // expr -> OP_SUB, expr
{ CurrentSemanticValue.expr.IsNegative = !CurrentSemanticValue.expr.IsNegative; }
        break;
      case 14: // expr -> OP_ADD, expr
{ ; }
        break;
      case 15: // func -> FUNC_FLOOR, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Floor, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 16: // func -> FUNC_CEIL, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Ceil, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 17: // func -> FUNC_ROUND, OP_LEFT_PAR, expr, OP_RIGHT_PAR
{ CurrentSemanticValue.expr = new Expression(Function.Round, ValueStack[ValueStack.Depth-2].expr); }
        break;
      case 18: // stat -> NUMBER
{ CurrentSemanticValue.expr = new Expression(ValueStack[ValueStack.Depth-1].String); }
        break;
      case 19: // stat -> const
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 20: // const -> CONST_PI
{ CurrentSemanticValue.expr = new Expression(Constant.Pi); }
        break;
      case 21: // const -> CONST_E
{ CurrentSemanticValue.expr = new Expression(Constant.E); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
